;(function () {

    // This file contains the code to define the graphics and then
    // renders them using data randomly generated by data.js.

    var data = gg.sampleData;
    var div  = d3.select('#examples');
    var opts = { width: 300, height: 200, padding: 35 };

    // Define graphics ...

    function g (spec) { return gg(spec).renderer(div, opts); }

    var scatterplot = g({ layers: [{ geometry: 'point', mapping: { x: 'd', y: 'r' } }] });

    var symmetric = g({
        layers: [ { geometry: 'line', mapping: { x: 'd', y: 'r' } }, ],
        scales: [ { aesthetic: 'y', center: 0 } ]
    });

    var linechart = g({
        layers: [
            { geometry: 'line', mapping: { x: 'd', y: 'r', group: 'subject', color: 'subject'} },
            { geometry: 'text', mapping: { x: 'd', y: 'r', }, text: '{d}, {r}', show: 'hover' }
        ],
        scales: [
            { aesthetic: 'color', range: ['#CFF09E', '#A8DBA8', '#79BD9A', '#3B8686'] }
        ]
    });

    var barchart = g({
        layers: [{ geometry: 'interval', mapping: { x: 'd', y: 'r' }, color: 'blue', width: 2 }],
        scales: [{ aesthetic: 'y', min: 0 }]
    });

    var histogram = g({
        layers: [{
            geometry: 'interval',
            mapping: { x: 'group', y: 'count', color: 'group' },
            width: 20,
            statistic: { kind: 'sum', group: 'who', variable: 'purchases' }
        }],
        scales: [
            { type: 'categorical', aesthetic: 'x' },
            { aesthetic: 'y', min: 0 }
        ]
    });

    var combined = g({
        layers: [
            { geometry: 'point', mapping: { x: 'd', y: 'r' }, size: 3 },
            { geometry: 'line', mapping: { x: 'd', y: 'r' } }
            //{ geometry: 'interval', mapping: { x: 'd', y: 'r' }, width: 2 },
        ]
    });

    var semilog = g({
        layers: [
            { geometry: 'point', mapping: { x: 'd', y: 'r' }, size: 3 },
            { geometry: 'line', mapping: { x: 'd', y: 'r' } }
        ],
        scales: [ { type: 'log', aesthetic: 'y', legend: 'whatever' },
                  { aesthetic: 'x', legend: 'foo' } ]
    });

    var heightHistogram = g({
        layers: [
            {
                geometry: 'interval',
                mapping: { x: 'bin', y: 'count' },
                statistic: { kind: 'bin', variable: 'height', bins: 30 }
            }
        ],
        scales: [
            { type: 'categorical', aesthetic: 'x' },
            { aesthetic: 'y', min: 0 }
        ]
    });

    var boxplot = g({
        layers: [ {
            geometry: 'box',
            mapping: { x: 'group', y: false },
            statistic: { kind: 'box', group: 'grade', variable: 'value' }
        }],
        scales: [
            { type: 'categorical', aesthetic: 'x' }
        ]
    });

    var twoPopulations = g({
        name: 'twoPopulations',
        layers: [ {
            geometry: 'point',
            mapping: { x: 'intelligence', y: 'wisdom', color: 'group' },
        }]
    });

    var quadrants = g({
        layers: [
            {
                geometry: 'point',
                mapping: { x: 'x', y: 'y', size: 'size' }
            },
            { geometry: 'text', mapping: { x: 'x', y: 'y' }, text: '{name}: {size}',  show: 'hover' }
        ],
        scales: [ { aesthetic: 'size', range: [ 1, 5 ]} ]
    });

    var areachartSmooth = g({
        layers: [ { geometry: 'area', mapping: { x: 'a', y: false, y0: 'top', y1: 'bottom' }, smooth: true } ]
    });

    var areachart = g({ layers: [ { geometry: 'area', mapping: { x: 'a', y: false, y0: 'top', y1: 'bottom' } } ] });

    // ... and render 'em

    linechart(data.upwardSubjects);
    combined(data.upward);
    barchart(_.map(data.upward, function (d) { return { d: d.d, r: Math.max(d.r, 0) }; }));
    quadrants(data.quadrants);
    histogram(data.purchases);
    semilog(data.semiLogData);
    heightHistogram(data.heightWeight);
    twoPopulations(data.twoPopulations);
    boxplot(data.forBoxPlots);
    symmetric(data.toBeCentered);
    areachartSmooth(data.upwardPairs);
    areachart(data.upwardPairs);

})();
